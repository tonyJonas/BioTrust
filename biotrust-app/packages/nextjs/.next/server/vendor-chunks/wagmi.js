"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/wagmi";
exports.ids = ["vendor-chunks/wagmi"];
exports.modules = {

/***/ "(ssr)/./node_modules/wagmi/dist/index.js":
/*!******************************************!*\
  !*** ./node_modules/wagmi/dist/index.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChainMismatchError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ChainMismatchError),\n/* harmony export */   ChainNotConfiguredError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ChainNotConfiguredError),\n/* harmony export */   ConfigChainsNotFound: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ConfigChainsNotFound),\n/* harmony export */   Connector: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_14__.Connector),\n/* harmony export */   ConnectorAlreadyConnectedError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ConnectorAlreadyConnectedError),\n/* harmony export */   ConnectorNotFoundError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_15__.ConnectorNotFoundError),\n/* harmony export */   Context: () => (/* binding */ Context),\n/* harmony export */   SwitchChainNotSupportedError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.SwitchChainNotSupportedError),\n/* harmony export */   WagmiConfig: () => (/* binding */ WagmiConfig),\n/* harmony export */   configureChains: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.configureChains),\n/* harmony export */   createConfig: () => (/* binding */ createConfig),\n/* harmony export */   createStorage: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.createStorage),\n/* harmony export */   deepEqual: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deepEqual),\n/* harmony export */   deserialize: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deserialize),\n/* harmony export */   erc20ABI: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.erc20ABI),\n/* harmony export */   erc4626ABI: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.erc4626ABI),\n/* harmony export */   erc721ABI: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.erc721ABI),\n/* harmony export */   mainnet: () => (/* reexport safe */ viem_chains__WEBPACK_IMPORTED_MODULE_16__.mainnet),\n/* harmony export */   paginatedIndexesConfig: () => (/* binding */ paginatedIndexesConfig),\n/* harmony export */   readContracts: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.readContracts),\n/* harmony export */   sepolia: () => (/* reexport safe */ viem_chains__WEBPACK_IMPORTED_MODULE_17__.sepolia),\n/* harmony export */   serialize: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.serialize),\n/* harmony export */   useAccount: () => (/* binding */ useAccount),\n/* harmony export */   useBalance: () => (/* binding */ useBalance),\n/* harmony export */   useBlockNumber: () => (/* binding */ useBlockNumber),\n/* harmony export */   useChainId: () => (/* binding */ useChainId),\n/* harmony export */   useConfig: () => (/* binding */ useConfig),\n/* harmony export */   useConnect: () => (/* binding */ useConnect),\n/* harmony export */   useContractEvent: () => (/* binding */ useContractEvent),\n/* harmony export */   useContractInfiniteReads: () => (/* binding */ useContractInfiniteReads),\n/* harmony export */   useContractRead: () => (/* binding */ useContractRead),\n/* harmony export */   useContractReads: () => (/* binding */ useContractReads),\n/* harmony export */   useContractWrite: () => (/* binding */ useContractWrite),\n/* harmony export */   useDisconnect: () => (/* binding */ useDisconnect),\n/* harmony export */   useEnsAddress: () => (/* binding */ useEnsAddress),\n/* harmony export */   useEnsAvatar: () => (/* binding */ useEnsAvatar),\n/* harmony export */   useEnsName: () => (/* binding */ useEnsName),\n/* harmony export */   useEnsResolver: () => (/* binding */ useEnsResolver),\n/* harmony export */   useFeeData: () => (/* binding */ useFeeData),\n/* harmony export */   useInfiniteQuery: () => (/* binding */ useInfiniteQuery),\n/* harmony export */   useMutation: () => (/* binding */ useMutation),\n/* harmony export */   useNetwork: () => (/* binding */ useNetwork),\n/* harmony export */   usePrepareContractWrite: () => (/* binding */ usePrepareContractWrite),\n/* harmony export */   usePrepareSendTransaction: () => (/* binding */ usePrepareSendTransaction),\n/* harmony export */   usePublicClient: () => (/* binding */ usePublicClient),\n/* harmony export */   useQuery: () => (/* binding */ useQuery),\n/* harmony export */   useQueryClient: () => (/* binding */ useQueryClient2),\n/* harmony export */   useSendTransaction: () => (/* binding */ useSendTransaction),\n/* harmony export */   useSignMessage: () => (/* binding */ useSignMessage),\n/* harmony export */   useSignTypedData: () => (/* binding */ useSignTypedData),\n/* harmony export */   useSwitchNetwork: () => (/* binding */ useSwitchNetwork),\n/* harmony export */   useToken: () => (/* binding */ useToken),\n/* harmony export */   useTransaction: () => (/* binding */ useTransaction),\n/* harmony export */   useWaitForTransaction: () => (/* binding */ useWaitForTransaction),\n/* harmony export */   useWalletClient: () => (/* binding */ useWalletClient),\n/* harmony export */   useWatchPendingTransactions: () => (/* binding */ useWatchPendingTransactions),\n/* harmony export */   useWebSocketPublicClient: () => (/* binding */ useWebSocketPublicClient)\n/* harmony export */ });\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/queryClient.mjs\");\n/* harmony import */ var _tanstack_react_query_persist_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tanstack/react-query-persist-client */ \"(ssr)/./node_modules/@tanstack/query-persist-client-core/build/lib/persist.mjs\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wagmi/core */ \"(ssr)/./node_modules/@wagmi/core/dist/chunk-TSH6VVF4.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/isRestoring.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/index.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/infiniteQueryObserver.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useMutation.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/queryObserver.mjs\");\n/* harmony import */ var use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! use-sync-external-store/shim/with-selector.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/with-selector.js\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @wagmi/core */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-W65LBPLT.js\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @wagmi/core */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-UGBGYVBH.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/mainnet.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/sepolia.js\");\n/* __next_internal_client_entry_do_not_use__ ChainMismatchError,ChainNotConfiguredError,ConfigChainsNotFound,Connector,ConnectorAlreadyConnectedError,ConnectorNotFoundError,Context,SwitchChainNotSupportedError,WagmiConfig,configureChains,createConfig,createStorage,deepEqual,deserialize,erc20ABI,erc4626ABI,erc721ABI,mainnet,paginatedIndexesConfig,readContracts,sepolia,serialize,useAccount,useBalance,useBlockNumber,useChainId,useConfig,useConnect,useContractEvent,useContractInfiniteReads,useContractRead,useContractReads,useContractWrite,useDisconnect,useEnsAddress,useEnsAvatar,useEnsName,useEnsResolver,useFeeData,useInfiniteQuery,useMutation,useNetwork,usePrepareContractWrite,usePrepareSendTransaction,usePublicClient,useQuery,useQueryClient,useSendTransaction,useSignMessage,useSignTypedData,useSwitchNetwork,useToken,useTransaction,useWaitForTransaction,useWalletClient,useWatchPendingTransactions,useWebSocketPublicClient auto */ // src/config.ts\n\n\n\n\nfunction createConfig({ queryClient = new _tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.QueryClient({\n    defaultOptions: {\n        queries: {\n            cacheTime: 1e3 * 60 * 60 * 24,\n            networkMode: \"offlineFirst\",\n            refetchOnWindowFocus: false,\n            retry: 0\n        },\n        mutations: {\n            networkMode: \"offlineFirst\"\n        }\n    }\n}), storage = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.createStorage)({\n    storage:  false ? 0 : _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.noopStorage\n}), persister =  false ? 0 : void 0, ...args }) {\n    const config = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.createConfig)({\n        ...args,\n        storage\n    });\n    if (persister) (0,_tanstack_react_query_persist_client__WEBPACK_IMPORTED_MODULE_2__.persistQueryClient)({\n        queryClient,\n        persister,\n        dehydrateOptions: {\n            shouldDehydrateQuery: (query)=>query.cacheTime !== 0 && query.queryKey[0].persist !== false\n        }\n    });\n    return Object.assign(config, {\n        queryClient\n    });\n}\n// src/context.ts\n\n\nvar Context = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3__.createContext(void 0);\nvar queryClientContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3__.createContext(void 0);\nfunction WagmiConfig({ children, config }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3__.createElement(Context.Provider, {\n        children: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3__.createElement(_tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__.QueryClientProvider, {\n            children,\n            client: config.queryClient,\n            context: queryClientContext\n        }),\n        value: config\n    });\n}\nfunction useConfig() {\n    const config = react__WEBPACK_IMPORTED_MODULE_3__.useContext(Context);\n    if (!config) throw new Error([\n        \"`useConfig` must be used within `WagmiConfig`.\\n\",\n        \"Read more: https://wagmi.sh/react/WagmiConfig\"\n    ].join(\"\\n\"));\n    return config;\n}\n// src/hooks/accounts/useAccount.ts\n\n\n// src/hooks/utils/query/useBaseQuery.ts\n\n\n// src/hooks/utils/useSyncExternalStore.ts\n\nvar useSyncExternalStore2 = use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_5__.useSyncExternalStore;\n// src/hooks/utils/query/utils.ts\nfunction isQueryKey(value) {\n    return Array.isArray(value);\n}\nfunction isPlainObject(o) {\n    if (!hasObjectPrototype(o)) {\n        return false;\n    }\n    const ctor = o.constructor;\n    if (typeof ctor === \"undefined\") {\n        return true;\n    }\n    const prot = ctor.prototype;\n    if (!hasObjectPrototype(prot)) {\n        return false;\n    }\n    if (!prot.hasOwnProperty(\"isPrototypeOf\")) {\n        return false;\n    }\n    return true;\n}\nfunction hasObjectPrototype(o) {\n    return Object.prototype.toString.call(o) === \"[object Object]\";\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n    if (!isQueryKey(arg1)) {\n        return arg1;\n    }\n    if (typeof arg2 === \"function\") {\n        return {\n            ...arg3,\n            queryKey: arg1,\n            queryFn: arg2\n        };\n    }\n    return {\n        ...arg2,\n        queryKey: arg1\n    };\n}\nfunction queryKeyHashFn(queryKey17) {\n    return JSON.stringify(queryKey17, (_, val)=>isPlainObject(val) ? Object.keys(val).sort().reduce((result, key)=>{\n            result[key] = val[key];\n            return result;\n        }, {}) : typeof val === \"bigint\" ? val.toString() : val);\n}\nfunction shouldThrowError(_useErrorBoundary, params) {\n    if (typeof _useErrorBoundary === \"function\") {\n        return _useErrorBoundary(...params);\n    }\n    return !!_useErrorBoundary;\n}\nfunction trackResult(result, observer) {\n    const trackedResult = {};\n    Object.keys(result).forEach((key)=>{\n        Object.defineProperty(trackedResult, key, {\n            configurable: false,\n            enumerable: true,\n            get: ()=>{\n                observer.trackedProps.add(key);\n                return result[key];\n            }\n        });\n    });\n    return trackedResult;\n}\n// src/hooks/utils/query/useBaseQuery.ts\nfunction useBaseQuery(options, Observer) {\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__.useQueryClient)({\n        context: options.context\n    });\n    const isRestoring = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_6__.useIsRestoring)();\n    const errorResetBoundary = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__.useQueryErrorResetBoundary)();\n    const defaultedOptions = queryClient.defaultQueryOptions({\n        ...options,\n        queryKeyHashFn\n    });\n    defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n    if (defaultedOptions.onError) {\n        defaultedOptions.onError = _tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__.notifyManager.batchCalls(defaultedOptions.onError);\n    }\n    if (defaultedOptions.onSuccess) {\n        defaultedOptions.onSuccess = _tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__.notifyManager.batchCalls(defaultedOptions.onSuccess);\n    }\n    if (defaultedOptions.onSettled) {\n        defaultedOptions.onSettled = _tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__.notifyManager.batchCalls(defaultedOptions.onSettled);\n    }\n    if (defaultedOptions.suspense) {\n        if (typeof defaultedOptions.staleTime !== \"number\") {\n            defaultedOptions.staleTime = 1e3;\n        }\n    }\n    if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n        if (!errorResetBoundary.isReset()) {\n            defaultedOptions.retryOnMount = false;\n        }\n    }\n    const [observer] = react__WEBPACK_IMPORTED_MODULE_3__.useState(()=>new Observer(queryClient, defaultedOptions));\n    const result = observer.getOptimisticResult(defaultedOptions);\n    useSyncExternalStore2(react__WEBPACK_IMPORTED_MODULE_3__.useCallback((onStoreChange)=>isRestoring ? ()=>void 0 : observer.subscribe(_tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__.notifyManager.batchCalls(onStoreChange)), [\n        observer,\n        isRestoring\n    ]), ()=>observer.getCurrentResult(), ()=>observer.getCurrentResult());\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        errorResetBoundary.clearReset();\n    }, [\n        errorResetBoundary\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        observer.setOptions(defaultedOptions, {\n            listeners: false\n        });\n    }, [\n        defaultedOptions,\n        observer\n    ]);\n    if (defaultedOptions.suspense && result.isLoading && result.isFetching && !isRestoring) {\n        throw observer.fetchOptimistic(defaultedOptions).then(({ data })=>{\n            defaultedOptions.onSuccess?.(data);\n            defaultedOptions.onSettled?.(data, null);\n        }).catch((error)=>{\n            errorResetBoundary.clearReset();\n            defaultedOptions.onError?.(error);\n            defaultedOptions.onSettled?.(void 0, error);\n        });\n    }\n    if (result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(defaultedOptions.useErrorBoundary, [\n        result.error,\n        observer.getCurrentQuery()\n    ])) {\n        throw result.error;\n    }\n    const status = result.status === \"loading\" && result.fetchStatus === \"idle\" ? \"idle\" : result.status;\n    const isIdle = status === \"idle\";\n    const isLoading = status === \"loading\" && result.fetchStatus === \"fetching\";\n    return {\n        ...result,\n        defaultedOptions,\n        isIdle,\n        isLoading,\n        observer,\n        status\n    };\n}\n// src/hooks/utils/query/useInfiniteQuery.ts\n\nfunction useInfiniteQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const baseQuery = useBaseQuery({\n        context: queryClientContext,\n        ...parsedOptions\n    }, _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.InfiniteQueryObserver);\n    const result = {\n        data: baseQuery.data,\n        error: baseQuery.error,\n        fetchNextPage: baseQuery.fetchNextPage,\n        fetchStatus: baseQuery.fetchStatus,\n        hasNextPage: baseQuery.hasNextPage,\n        isError: baseQuery.isError,\n        isFetched: baseQuery.isFetched,\n        isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n        isFetching: baseQuery.isFetching,\n        isFetchingNextPage: baseQuery.isFetchingNextPage,\n        isIdle: baseQuery.isIdle,\n        isLoading: baseQuery.isLoading,\n        isRefetching: baseQuery.isRefetching,\n        isSuccess: baseQuery.isSuccess,\n        refetch: baseQuery.refetch,\n        status: baseQuery.status,\n        internal: {\n            dataUpdatedAt: baseQuery.dataUpdatedAt,\n            errorUpdatedAt: baseQuery.errorUpdatedAt,\n            failureCount: baseQuery.failureCount,\n            isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n            isLoadingError: baseQuery.isLoadingError,\n            isPaused: baseQuery.isPaused,\n            isPlaceholderData: baseQuery.isPlaceholderData,\n            isPreviousData: baseQuery.isPreviousData,\n            isRefetchError: baseQuery.isRefetchError,\n            isStale: baseQuery.isStale,\n            remove: baseQuery.remove\n        }\n    };\n    return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n// src/hooks/utils/query/useMutation.ts\n\nfunction useMutation(arg1, arg2, arg3) {\n    const options = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.parseMutationArgs)(arg1, arg2, arg3);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useMutation)({\n        context: queryClientContext,\n        ...options\n    });\n}\n// src/hooks/utils/query/useQuery.ts\n\nfunction useQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const baseQuery = useBaseQuery({\n        context: queryClientContext,\n        ...parsedOptions\n    }, _tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.QueryObserver);\n    const result = {\n        data: baseQuery.data,\n        error: baseQuery.error,\n        fetchStatus: baseQuery.fetchStatus,\n        isError: baseQuery.isError,\n        isFetched: baseQuery.isFetched,\n        isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n        isFetching: baseQuery.isFetching,\n        isIdle: baseQuery.isIdle,\n        isLoading: baseQuery.isLoading,\n        isRefetching: baseQuery.isRefetching,\n        isSuccess: baseQuery.isSuccess,\n        refetch: baseQuery.refetch,\n        status: baseQuery.status,\n        internal: {\n            dataUpdatedAt: baseQuery.dataUpdatedAt,\n            errorUpdatedAt: baseQuery.errorUpdatedAt,\n            failureCount: baseQuery.failureCount,\n            isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n            isLoadingError: baseQuery.isLoadingError,\n            isPaused: baseQuery.isPaused,\n            isPlaceholderData: baseQuery.isPlaceholderData,\n            isPreviousData: baseQuery.isPreviousData,\n            isRefetchError: baseQuery.isRefetchError,\n            isStale: baseQuery.isStale,\n            remove: baseQuery.remove\n        }\n    };\n    return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n// src/hooks/utils/query/useQueryClient.ts\n\nvar useQueryClient2 = ()=>(0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__.useQueryClient)({\n        context: queryClientContext\n    });\n// src/hooks/viem/usePublicClient.ts\n\n\nfunction usePublicClient({ chainId } = {}) {\n    return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_13__.useSyncExternalStoreWithSelector)((cb)=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.watchPublicClient)({\n            chainId\n        }, cb), ()=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getPublicClient)({\n            chainId\n        }), ()=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getPublicClient)({\n            chainId\n        }), (x)=>x, (a, b)=>a.uid === b.uid);\n}\n// src/hooks/viem/useWalletClient.ts\n\n\nfunction queryKey({ chainId }) {\n    return [\n        {\n            entity: \"walletClient\",\n            chainId,\n            persist: false\n        }\n    ];\n}\nfunction queryFn({ queryKey: [{ chainId }] }) {\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getWalletClient)({\n        chainId\n    });\n}\nfunction useWalletClient({ chainId: chainId_, suspense, onError, onSettled, onSuccess } = {}) {\n    const { connector } = useAccount();\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    const walletClientQuery = useQuery(queryKey({\n        chainId\n    }), queryFn, {\n        cacheTime: 0,\n        enabled: Boolean(connector),\n        staleTime: Infinity,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n    const queryClient = useQueryClient2();\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        const unwatch = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.watchWalletClient)({\n            chainId\n        }, (walletClient)=>{\n            if (walletClient) queryClient.invalidateQueries(queryKey({\n                chainId\n            }));\n            else queryClient.removeQueries(queryKey({\n                chainId\n            }));\n        });\n        return unwatch;\n    }, [\n        queryClient,\n        chainId\n    ]);\n    return walletClientQuery;\n}\n// src/hooks/viem/useWebSocketPublicClient.ts\n\n\nfunction useWebSocketPublicClient({ chainId } = {}) {\n    return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_13__.useSyncExternalStoreWithSelector)((cb)=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.watchWebSocketPublicClient)({\n            chainId\n        }, cb), ()=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getWebSocketPublicClient)({\n            chainId\n        }), ()=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getWebSocketPublicClient)({\n            chainId\n        }), (x)=>x, (a, b)=>a?.uid === b?.uid);\n}\n// src/hooks/utils/useChainId.ts\nfunction useChainId({ chainId } = {}) {\n    const publicClient = usePublicClient({\n        chainId\n    });\n    return publicClient.chain.id;\n}\n// src/hooks/utils/useForceUpdate.ts\n\nfunction useForceUpdate() {\n    const [, forceUpdate] = react__WEBPACK_IMPORTED_MODULE_3__.useReducer((x)=>x + 1, 0);\n    return forceUpdate;\n}\n// src/hooks/utils/useInvalidateOnBlock.ts\n\n// src/hooks/network-status/useBlockNumber.ts\n\n\nfunction queryKey2({ chainId, scopeKey }) {\n    return [\n        {\n            entity: \"blockNumber\",\n            chainId,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn2({ queryKey: [{ chainId }] }) {\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchBlockNumber)({\n        chainId\n    });\n}\nfunction useBlockNumber({ cacheTime = 0, chainId: chainId_, enabled = true, scopeKey, staleTime, suspense, watch = false, onBlock, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    const publicClient = usePublicClient({\n        chainId\n    });\n    const webSocketPublicClient = useWebSocketPublicClient({\n        chainId\n    });\n    const queryClient = useQueryClient2();\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        if (!enabled) return;\n        if (!watch && !onBlock) return;\n        const publicClient_ = webSocketPublicClient ?? publicClient;\n        const unwatch = publicClient_.watchBlockNumber({\n            onBlockNumber: (blockNumber)=>{\n                if (watch) queryClient.setQueryData(queryKey2({\n                    chainId,\n                    scopeKey\n                }), blockNumber);\n                if (onBlock) onBlock(blockNumber);\n            },\n            emitOnBegin: true\n        });\n        return unwatch;\n    }, [\n        chainId,\n        scopeKey,\n        onBlock,\n        publicClient,\n        queryClient,\n        watch,\n        webSocketPublicClient,\n        enabled\n    ]);\n    return useQuery(queryKey2({\n        scopeKey,\n        chainId\n    }), queryFn2, {\n        cacheTime,\n        enabled,\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/network-status/useFeeData.ts\n\n\nfunction queryKey3({ chainId, formatUnits, scopeKey }) {\n    return [\n        {\n            entity: \"feeData\",\n            chainId,\n            formatUnits,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn3({ queryKey: [{ chainId, formatUnits }] }) {\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchFeeData)({\n        chainId,\n        formatUnits\n    });\n}\nfunction useFeeData({ cacheTime, chainId: chainId_, enabled = true, formatUnits = \"gwei\", scopeKey, staleTime, suspense, watch, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    const queryKey_ = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>queryKey3({\n            chainId,\n            formatUnits,\n            scopeKey\n        }), [\n        chainId,\n        formatUnits,\n        scopeKey\n    ]);\n    const feeDataQuery = useQuery(queryKey_, queryFn3, {\n        cacheTime,\n        enabled,\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n    useInvalidateOnBlock({\n        chainId,\n        enabled: Boolean(enabled && watch),\n        queryKey: queryKey_\n    });\n    return feeDataQuery;\n}\n// src/hooks/utils/useInvalidateOnBlock.ts\nfunction useInvalidateOnBlock({ chainId, enabled, queryKey: queryKey17 }) {\n    const queryClient = useQueryClient2();\n    const onBlock = react__WEBPACK_IMPORTED_MODULE_3__.useCallback(()=>queryClient.invalidateQueries({\n            queryKey: queryKey17\n        }, {\n            cancelRefetch: false\n        }), [\n        queryClient,\n        queryKey17\n    ]);\n    useBlockNumber({\n        chainId,\n        enabled,\n        onBlock: enabled ? onBlock : void 0,\n        scopeKey: enabled ? void 0 : \"idle\"\n    });\n}\n// src/hooks/utils/useSyncExternalStoreWithTracked.ts\n\n\n\nvar isPlainObject2 = (obj)=>typeof obj === \"object\" && !Array.isArray(obj);\nfunction useSyncExternalStoreWithTracked(subscribe, getSnapshot, getServerSnapshot = getSnapshot, isEqual = _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deepEqual) {\n    const trackedKeys = react__WEBPACK_IMPORTED_MODULE_3__.useRef([]);\n    const result = (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_13__.useSyncExternalStoreWithSelector)(subscribe, getSnapshot, getServerSnapshot, (x)=>x, (a, b)=>{\n        if (isPlainObject2(a) && isPlainObject2(b) && trackedKeys.current.length) {\n            for (const key of trackedKeys.current){\n                const equal = isEqual(a[key], b[key]);\n                if (!equal) return false;\n            }\n            return true;\n        }\n        return isEqual(a, b);\n    });\n    if (isPlainObject2(result)) {\n        const trackedResult = {\n            ...result\n        };\n        Object.defineProperties(trackedResult, Object.entries(trackedResult).reduce((res, [key, value])=>{\n            return {\n                ...res,\n                [key]: {\n                    configurable: false,\n                    enumerable: true,\n                    get: ()=>{\n                        if (!trackedKeys.current.includes(key)) {\n                            trackedKeys.current.push(key);\n                        }\n                        return value;\n                    }\n                }\n            };\n        }, {}));\n        return trackedResult;\n    }\n    return result;\n}\n// src/hooks/accounts/useAccount.ts\nfunction useAccount({ onConnect, onDisconnect } = {}) {\n    const config = useConfig();\n    const watchAccount_ = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((callback)=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.watchAccount)(callback), [\n        config\n    ]);\n    const account = useSyncExternalStoreWithTracked(watchAccount_, _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getAccount);\n    const previousAccountRef = react__WEBPACK_IMPORTED_MODULE_3__.useRef();\n    const previousAccount = previousAccountRef.current;\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        if (previousAccount?.status !== \"connected\" && account.status === \"connected\") {\n            onConnect?.({\n                address: account.address,\n                connector: account.connector,\n                isReconnected: previousAccount?.status === \"reconnecting\" || previousAccount?.status === void 0\n            });\n        }\n        if (previousAccount?.status === \"connected\" && account.status === \"disconnected\") {\n            onDisconnect?.();\n        }\n        previousAccountRef.current = account;\n    }, [\n        onConnect,\n        onDisconnect,\n        previousAccount,\n        account\n    ]);\n    return account;\n}\n// src/hooks/accounts/useBalance.ts\n\n\nfunction queryKey4({ address, chainId, formatUnits, scopeKey, token }) {\n    return [\n        {\n            entity: \"balance\",\n            address,\n            chainId,\n            formatUnits,\n            scopeKey,\n            token\n        }\n    ];\n}\nfunction queryFn4({ queryKey: [{ address, chainId, formatUnits, token }] }) {\n    if (!address) throw new Error(\"address is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchBalance)({\n        address,\n        chainId,\n        formatUnits,\n        token\n    });\n}\nfunction useBalance({ address, cacheTime, chainId: chainId_, enabled = true, formatUnits, scopeKey, staleTime, suspense, token, watch, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    const queryKey_ = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>queryKey4({\n            address,\n            chainId,\n            formatUnits,\n            scopeKey,\n            token\n        }), [\n        address,\n        chainId,\n        formatUnits,\n        scopeKey,\n        token\n    ]);\n    const balanceQuery = useQuery(queryKey_, queryFn4, {\n        cacheTime,\n        enabled: Boolean(enabled && address),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n    useInvalidateOnBlock({\n        chainId,\n        enabled: Boolean(enabled && watch && address),\n        queryKey: queryKey_\n    });\n    return balanceQuery;\n}\n// src/hooks/accounts/useConnect.ts\n\n\nvar mutationKey = (args)=>[\n        {\n            entity: \"connect\",\n            ...args\n        }\n    ];\nvar mutationFn = (args)=>{\n    const { connector, chainId } = args;\n    if (!connector) throw new Error(\"connector is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.connect)({\n        connector,\n        chainId\n    });\n};\nfunction useConnect({ chainId, connector, onError, onMutate, onSettled, onSuccess } = {}) {\n    const config = useConfig();\n    const { data, error, isError, isIdle, isLoading, isSuccess, mutate, mutateAsync, reset, status, variables } = useMutation(mutationKey({\n        connector,\n        chainId\n    }), mutationFn, {\n        onError,\n        onMutate,\n        onSettled,\n        onSuccess\n    });\n    const connect2 = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((args)=>{\n        return mutate({\n            chainId: args?.chainId ?? chainId,\n            connector: args?.connector ?? connector\n        });\n    }, [\n        chainId,\n        connector,\n        mutate\n    ]);\n    const connectAsync = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((args)=>{\n        return mutateAsync({\n            chainId: args?.chainId ?? chainId,\n            connector: args?.connector ?? connector\n        });\n    }, [\n        chainId,\n        connector,\n        mutateAsync\n    ]);\n    return {\n        connect: connect2,\n        connectAsync,\n        connectors: config.connectors,\n        data,\n        error,\n        isError,\n        isIdle,\n        isLoading,\n        isSuccess,\n        pendingConnector: variables?.connector,\n        reset,\n        status,\n        variables\n    };\n}\n// src/hooks/accounts/useDisconnect.ts\n\nvar mutationKey2 = [\n    {\n        entity: \"disconnect\"\n    }\n];\nvar mutationFn2 = ()=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.disconnect)();\nfunction useDisconnect({ onError, onMutate, onSettled, onSuccess } = {}) {\n    const { error, isError, isIdle, isLoading, isSuccess, mutate: disconnect2, mutateAsync: disconnectAsync, reset, status } = useMutation(mutationKey2, mutationFn2, {\n        ...onError ? {\n            onError (error2, _variables, context) {\n                onError(error2, context);\n            }\n        } : {},\n        onMutate,\n        ...onSettled ? {\n            onSettled (_data, error2, _variables, context) {\n                onSettled(error2, context);\n            }\n        } : {},\n        ...onSuccess ? {\n            onSuccess (_data, _variables, context) {\n                onSuccess(context);\n            }\n        } : {}\n    });\n    return {\n        disconnect: disconnect2,\n        disconnectAsync,\n        error,\n        isError,\n        isIdle,\n        isLoading,\n        isSuccess,\n        reset,\n        status\n    };\n}\n// src/hooks/accounts/useNetwork.ts\n\n\nfunction useNetwork() {\n    const config = useConfig();\n    const watchNetwork_ = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((callback)=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.watchNetwork)(callback), [\n        config\n    ]);\n    return useSyncExternalStoreWithTracked(watchNetwork_, _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getNetwork);\n}\n// src/hooks/accounts/useSignMessage.ts\n\n\nvar mutationKey3 = (args)=>[\n        {\n            entity: \"signMessage\",\n            ...args\n        }\n    ];\nvar mutationFn3 = (args)=>{\n    const { message } = args;\n    if (!message) throw new Error(\"message is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.signMessage)({\n        message\n    });\n};\nfunction useSignMessage({ message, onError, onMutate, onSettled, onSuccess } = {}) {\n    const { data, error, isError, isIdle, isLoading, isSuccess, mutate, mutateAsync, reset, status, variables } = useMutation(mutationKey3({\n        message\n    }), mutationFn3, {\n        onError,\n        onMutate,\n        onSettled,\n        onSuccess\n    });\n    const signMessage2 = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((args)=>mutate(args || {\n            message\n        }), [\n        message,\n        mutate\n    ]);\n    const signMessageAsync = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((args)=>mutateAsync(args || {\n            message\n        }), [\n        message,\n        mutateAsync\n    ]);\n    return {\n        data,\n        error,\n        isError,\n        isIdle,\n        isLoading,\n        isSuccess,\n        reset,\n        signMessage: signMessage2,\n        signMessageAsync,\n        status,\n        variables\n    };\n}\n// src/hooks/accounts/useSignTypedData.ts\n\n\nfunction mutationKey4({ domain, types, message, primaryType }) {\n    return [\n        {\n            entity: \"signTypedData\",\n            domain,\n            types,\n            message,\n            primaryType\n        }\n    ];\n}\nfunction mutationFn4(args) {\n    const { domain, types, primaryType, message } = args;\n    if (!domain) throw new Error(\"domain is required\");\n    if (!types) throw new Error(\"types is required\");\n    if (!primaryType) throw new Error(\"primaryType is required\");\n    if (!message) throw new Error(\"message is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.signTypedData)({\n        domain,\n        message,\n        primaryType,\n        types\n    });\n}\nfunction useSignTypedData({ domain, types, message, primaryType, onError, onMutate, onSettled, onSuccess } = {}) {\n    const { data, error, isError, isIdle, isLoading, isSuccess, mutate, mutateAsync, reset, status, variables } = useMutation(mutationKey4({\n        domain,\n        message,\n        primaryType,\n        types\n    }), mutationFn4, {\n        onError,\n        onMutate,\n        onSettled,\n        onSuccess\n    });\n    const signTypedData2 = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((args)=>mutate({\n            domain: args?.domain ?? domain,\n            types: args?.types ?? types,\n            message: args?.message ?? message,\n            primaryType: args?.primaryType ?? primaryType\n        }), [\n        domain,\n        types,\n        primaryType,\n        message,\n        mutate\n    ]);\n    const signTypedDataAsync = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((args)=>mutateAsync({\n            domain: args?.domain ?? domain,\n            types: args?.types ?? types,\n            message: args?.message ?? message,\n            primaryType: args?.primaryType ?? primaryType\n        }), [\n        domain,\n        types,\n        primaryType,\n        message,\n        mutateAsync\n    ]);\n    return {\n        data,\n        error,\n        isError,\n        isIdle,\n        isLoading,\n        isSuccess,\n        reset,\n        signTypedData: signTypedData2,\n        signTypedDataAsync,\n        status,\n        variables\n    };\n}\n// src/hooks/accounts/useSwitchNetwork.ts\n\n\nvar mutationKey5 = (args)=>[\n        {\n            entity: \"switchNetwork\",\n            ...args\n        }\n    ];\nvar mutationFn5 = (args)=>{\n    const { chainId } = args;\n    if (!chainId) throw new Error(\"chainId is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.switchNetwork)({\n        chainId\n    });\n};\nfunction useSwitchNetwork({ chainId, throwForSwitchChainNotSupported, onError, onMutate, onSettled, onSuccess } = {}) {\n    const config = useConfig();\n    const forceUpdate = useForceUpdate();\n    const { data, error, isError, isIdle, isLoading, isSuccess, mutate, mutateAsync, reset, status, variables } = useMutation(mutationKey5({\n        chainId\n    }), mutationFn5, {\n        onError,\n        onMutate,\n        onSettled,\n        onSuccess\n    });\n    const switchNetwork_ = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((chainId_)=>mutate({\n            chainId: chainId_ ?? chainId\n        }), [\n        chainId,\n        mutate\n    ]);\n    const switchNetworkAsync_ = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((chainId_)=>mutateAsync({\n            chainId: chainId_ ?? chainId\n        }), [\n        chainId,\n        mutateAsync\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        const unwatch = config.subscribe(({ chains, connector })=>({\n                chains,\n                connector\n            }), forceUpdate);\n        return unwatch;\n    }, [\n        config,\n        forceUpdate\n    ]);\n    let switchNetwork2;\n    let switchNetworkAsync;\n    const supportsSwitchChain = !!config.connector?.switchChain;\n    if (throwForSwitchChainNotSupported || supportsSwitchChain) {\n        switchNetwork2 = switchNetwork_;\n        switchNetworkAsync = switchNetworkAsync_;\n    }\n    return {\n        chains: config.chains ?? [],\n        data,\n        error,\n        isError,\n        isIdle,\n        isLoading,\n        isSuccess,\n        pendingChainId: variables?.chainId,\n        reset,\n        status,\n        switchNetwork: switchNetwork2,\n        switchNetworkAsync,\n        variables\n    };\n}\n// src/hooks/contracts/useContractEvent.ts\n\nfunction useContractEvent({ address, chainId, abi, listener, eventName } = {}) {\n    const publicClient = usePublicClient({\n        chainId\n    });\n    const webSocketPublicClient = useWebSocketPublicClient({\n        chainId\n    });\n    const unwatch = react__WEBPACK_IMPORTED_MODULE_3__.useRef();\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        if (!abi || !address || !eventName) return;\n        const publicClient_ = webSocketPublicClient || publicClient;\n        unwatch.current = publicClient_.watchContractEvent({\n            abi,\n            address,\n            eventName,\n            onLogs: listener\n        });\n        return unwatch.current;\n    }, [\n        abi,\n        address,\n        eventName,\n        publicClient.uid,\n        webSocketPublicClient?.uid\n    ]);\n    return unwatch.current;\n}\n// src/hooks/contracts/useContractInfiniteReads.ts\n\n\n\nfunction queryKey5({ allowFailure, blockNumber, blockTag, cacheKey, scopeKey }) {\n    return [\n        {\n            entity: \"readContractsInfinite\",\n            allowFailure,\n            blockNumber,\n            blockTag,\n            cacheKey,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn5({ contracts }) {\n    return ({ queryKey: [{ allowFailure, blockNumber, blockTag }], pageParam })=>{\n        return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.readContracts)({\n            allowFailure,\n            blockNumber,\n            blockTag,\n            contracts: contracts(pageParam || void 0)\n        });\n    };\n}\nfunction useContractInfiniteReads({ allowFailure, blockNumber, blockTag, cacheKey, cacheTime, contracts, enabled: enabled_ = true, getNextPageParam, isDataEqual, keepPreviousData, onError, onSettled, onSuccess, scopeKey, select, staleTime, structuralSharing = (oldData, newData)=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(oldData, newData) ? oldData : (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.replaceEqualDeep)(oldData, newData), suspense }) {\n    const queryKey_ = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>queryKey5({\n            allowFailure,\n            blockNumber,\n            blockTag,\n            cacheKey,\n            scopeKey\n        }), [\n        allowFailure,\n        blockNumber,\n        blockTag,\n        cacheKey,\n        scopeKey\n    ]);\n    const enabled = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>{\n        const enabled2 = Boolean(enabled_ && contracts);\n        return enabled2;\n    }, [\n        contracts,\n        enabled_\n    ]);\n    return useInfiniteQuery(queryKey_, queryFn5({\n        contracts\n    }), {\n        cacheTime,\n        enabled,\n        getNextPageParam,\n        isDataEqual,\n        keepPreviousData,\n        select,\n        staleTime,\n        structuralSharing,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\nfunction paginatedIndexesConfig(fn, { perPage, start, direction }) {\n    const contracts = (page = 0)=>[\n            ...Array(perPage).keys()\n        ].map((index)=>{\n            return direction === \"increment\" ? start + index + page * perPage : start - index - page * perPage;\n        }).filter((index)=>index >= 0).flatMap(fn);\n    return {\n        contracts,\n        getNextPageParam (lastPage, pages) {\n            return lastPage?.length === perPage ? pages.length : void 0;\n        }\n    };\n}\n// src/hooks/contracts/useContractRead.ts\n\n\n\nfunction queryKey6({ account, address, args, blockNumber, blockTag, chainId, functionName, scopeKey }) {\n    return [\n        {\n            entity: \"readContract\",\n            account,\n            address,\n            args,\n            blockNumber,\n            blockTag,\n            chainId,\n            functionName,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn6({ abi }) {\n    return async ({ queryKey: [{ account, address, args, blockNumber, blockTag, chainId, functionName }] })=>{\n        if (!abi) throw new Error(\"abi is required\");\n        if (!address) throw new Error(\"address is required\");\n        return await (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.readContract)({\n            account,\n            address,\n            args,\n            blockNumber,\n            blockTag,\n            chainId,\n            abi,\n            functionName\n        }) ?? null;\n    };\n}\nfunction useContractRead({ abi, address, account, args, blockNumber: blockNumberOverride, blockTag, cacheOnBlock = false, cacheTime, chainId: chainId_, enabled: enabled_ = true, functionName, isDataEqual, keepPreviousData, onError, onSettled, onSuccess, scopeKey, select, staleTime, structuralSharing = (oldData, newData)=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(oldData, newData) ? oldData : (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.replaceEqualDeep)(oldData, newData), suspense, watch } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    const { data: blockNumber_ } = useBlockNumber({\n        chainId,\n        enabled: watch || cacheOnBlock,\n        scopeKey: watch || cacheOnBlock ? void 0 : \"idle\",\n        watch\n    });\n    const blockNumber = blockNumberOverride ?? blockNumber_;\n    const queryKey_ = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>queryKey6({\n            account,\n            address,\n            args,\n            blockNumber: cacheOnBlock ? blockNumber : void 0,\n            blockTag,\n            chainId,\n            functionName,\n            scopeKey\n        }), [\n        account,\n        address,\n        args,\n        blockNumber,\n        blockTag,\n        cacheOnBlock,\n        chainId,\n        functionName,\n        scopeKey\n    ]);\n    const enabled = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>{\n        let enabled2 = Boolean(enabled_ && abi && address && functionName);\n        if (cacheOnBlock) enabled2 = Boolean(enabled2 && blockNumber);\n        return enabled2;\n    }, [\n        abi,\n        address,\n        blockNumber,\n        cacheOnBlock,\n        enabled_,\n        functionName\n    ]);\n    useInvalidateOnBlock({\n        chainId,\n        enabled: Boolean(enabled && watch && !cacheOnBlock),\n        queryKey: queryKey_\n    });\n    return useQuery(queryKey_, queryFn6({\n        abi\n    }), {\n        cacheTime,\n        enabled,\n        isDataEqual,\n        keepPreviousData,\n        select,\n        staleTime,\n        structuralSharing,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/contracts/useContractReads.ts\n\n\n\nfunction queryKey7({ allowFailure, blockNumber, blockTag, chainId, contracts, scopeKey }) {\n    return [\n        {\n            entity: \"readContracts\",\n            allowFailure,\n            blockNumber,\n            blockTag,\n            chainId,\n            scopeKey,\n            contracts: (contracts ?? []).map(({ address, args, chainId: chainId2, functionName })=>({\n                    address,\n                    args,\n                    chainId: chainId2,\n                    functionName\n                }))\n        }\n    ];\n}\nfunction queryFn7({ abis }) {\n    return ({ queryKey: [{ allowFailure, blockNumber, blockTag, contracts: contracts_ }] })=>{\n        const contracts = contracts_.map((contract, i)=>({\n                ...contract,\n                abi: abis[i]\n            }));\n        return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.readContracts)({\n            allowFailure,\n            contracts,\n            blockNumber,\n            blockTag\n        });\n    };\n}\nfunction useContractReads({ allowFailure: allowFailure_, blockNumber: blockNumberOverride, blockTag, cacheOnBlock = false, cacheTime, contracts, enabled: enabled_ = true, isDataEqual, keepPreviousData, onError, onSettled, onSuccess, scopeKey, select, staleTime, structuralSharing = (oldData, newData)=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(oldData, newData) ? oldData : (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.replaceEqualDeep)(oldData, newData), suspense, watch } = {}) {\n    const allowFailure = allowFailure_ ?? true;\n    const { data: blockNumber_ } = useBlockNumber({\n        enabled: watch || cacheOnBlock,\n        watch\n    });\n    const chainId = useChainId();\n    const blockNumber = blockNumberOverride ?? blockNumber_;\n    const queryKey_ = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>queryKey7({\n            allowFailure,\n            blockNumber: cacheOnBlock ? blockNumber : void 0,\n            blockTag,\n            chainId,\n            contracts,\n            scopeKey\n        }), [\n        allowFailure,\n        blockNumber,\n        blockTag,\n        cacheOnBlock,\n        chainId,\n        scopeKey,\n        contracts\n    ]);\n    const enabled = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>{\n        let enabled2 = Boolean(enabled_ && contracts?.every((x)=>x.abi && x.address && x.functionName));\n        if (cacheOnBlock) enabled2 = Boolean(enabled2 && blockNumber);\n        return enabled2;\n    }, [\n        blockNumber,\n        cacheOnBlock,\n        contracts,\n        enabled_\n    ]);\n    useInvalidateOnBlock({\n        enabled: Boolean(enabled && watch && !cacheOnBlock),\n        queryKey: queryKey_\n    });\n    const abis = (contracts ?? []).map(({ abi })=>abi);\n    return useQuery(queryKey_, queryFn7({\n        abis\n    }), {\n        cacheTime,\n        enabled,\n        isDataEqual,\n        keepPreviousData,\n        staleTime,\n        select,\n        structuralSharing,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/contracts/useContractWrite.ts\n\n\n\nfunction mutationKey6({ address, abi, functionName, ...config }) {\n    const { args, accessList, account, dataSuffix, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, request, value } = config;\n    return [\n        {\n            entity: \"writeContract\",\n            address,\n            args,\n            abi,\n            accessList,\n            account,\n            dataSuffix,\n            functionName,\n            gas,\n            gasPrice,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            nonce,\n            request,\n            value\n        }\n    ];\n}\nfunction mutationFn6(config) {\n    if (config.mode === \"prepared\") {\n        if (!config.request) throw new Error(\"request is required\");\n        return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.writeContract)({\n            mode: \"prepared\",\n            request: config.request\n        });\n    }\n    if (!config.address) throw new Error(\"address is required\");\n    if (!config.abi) throw new Error(\"abi is required\");\n    if (!config.functionName) throw new Error(\"functionName is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.writeContract)({\n        address: config.address,\n        args: config.args,\n        chainId: config.chainId,\n        abi: config.abi,\n        functionName: config.functionName,\n        accessList: config.accessList,\n        account: config.account,\n        dataSuffix: config.dataSuffix,\n        gas: config.gas,\n        gasPrice: config.gasPrice,\n        maxFeePerGas: config.maxFeePerGas,\n        maxPriorityFeePerGas: config.maxPriorityFeePerGas,\n        nonce: config.nonce,\n        value: config.value\n    });\n}\nfunction useContractWrite(config) {\n    const { address, abi, args, chainId, functionName, mode, request, dataSuffix } = config;\n    const { accessList, account, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, value } = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getSendTransactionParameters)(config);\n    const { data, error, isError, isIdle, isLoading, isSuccess, mutate, mutateAsync, reset, status, variables } = useMutation(mutationKey6({\n        address,\n        abi,\n        functionName,\n        chainId,\n        mode,\n        args,\n        accessList,\n        account,\n        dataSuffix,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        request,\n        value\n    }), mutationFn6, {\n        onError: config.onError,\n        onMutate: config.onMutate,\n        onSettled: config.onSettled,\n        onSuccess: config.onSuccess\n    });\n    const write = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>{\n        if (config.mode === \"prepared\") {\n            if (!request) return void 0;\n            return ()=>mutate({\n                    mode: \"prepared\",\n                    request: config.request,\n                    chainId: config.chainId\n                });\n        }\n        return (overrideConfig)=>mutate({\n                address,\n                args,\n                abi,\n                functionName,\n                chainId,\n                accessList,\n                account,\n                dataSuffix,\n                gas,\n                gasPrice,\n                maxFeePerGas,\n                maxPriorityFeePerGas,\n                nonce,\n                value,\n                ...overrideConfig\n            });\n    }, [\n        accessList,\n        account,\n        abi,\n        address,\n        args,\n        chainId,\n        config.chainId,\n        config.mode,\n        config.request,\n        dataSuffix,\n        functionName,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        mutate,\n        nonce,\n        request,\n        value\n    ]);\n    const writeAsync = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>{\n        if (config.mode === \"prepared\") {\n            if (!request) return void 0;\n            return ()=>mutateAsync({\n                    mode: \"prepared\",\n                    request: config.request\n                });\n        }\n        return (overrideConfig)=>mutateAsync({\n                address,\n                args,\n                abi,\n                chainId,\n                functionName,\n                accessList,\n                account,\n                dataSuffix,\n                gas,\n                gasPrice,\n                maxFeePerGas,\n                maxPriorityFeePerGas,\n                nonce,\n                value,\n                ...overrideConfig\n            });\n    }, [\n        accessList,\n        account,\n        abi,\n        address,\n        args,\n        chainId,\n        config.mode,\n        config.request,\n        dataSuffix,\n        functionName,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        mutateAsync,\n        nonce,\n        request,\n        value\n    ]);\n    return {\n        data,\n        error,\n        isError,\n        isIdle,\n        isLoading,\n        isSuccess,\n        reset,\n        status,\n        variables,\n        write,\n        writeAsync\n    };\n}\n// src/hooks/contracts/usePrepareContractWrite.ts\n\n\nfunction queryKey8({ accessList, account, activeChainId, args, address, blockNumber, blockTag, chainId, dataSuffix, functionName, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, scopeKey, walletClientAddress, value }) {\n    return [\n        {\n            entity: \"prepareContractTransaction\",\n            accessList,\n            account,\n            activeChainId,\n            address,\n            args,\n            blockNumber,\n            blockTag,\n            chainId,\n            dataSuffix,\n            functionName,\n            gas,\n            gasPrice,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            nonce,\n            scopeKey,\n            walletClientAddress,\n            value\n        }\n    ];\n}\nfunction queryFn8({ abi, walletClient }) {\n    return ({ queryKey: [{ accessList, account, args, address, blockNumber, blockTag, chainId, dataSuffix, functionName, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, value }] })=>{\n        if (!abi) throw new Error(\"abi is required\");\n        if (!address) throw new Error(\"address is required\");\n        if (!functionName) throw new Error(\"functionName is required\");\n        return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.prepareWriteContract)({\n            abi,\n            accessList,\n            account,\n            args,\n            address,\n            blockNumber,\n            blockTag,\n            chainId,\n            dataSuffix,\n            functionName,\n            gas,\n            gasPrice,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            nonce,\n            walletClient,\n            value\n        });\n    };\n}\nfunction usePrepareContractWrite({ address, abi, functionName, chainId, args, cacheTime, dataSuffix, enabled = true, scopeKey, staleTime, suspense, onError, onSettled, onSuccess, ...config } = {}) {\n    const { chain: activeChain } = useNetwork();\n    const { data: walletClient } = useWalletClient({\n        chainId\n    });\n    const { accessList, account, blockNumber, blockTag, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, value } = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getCallParameters)(config);\n    const prepareContractWriteQuery = useQuery(queryKey8({\n        accessList,\n        account,\n        activeChainId: activeChain?.id,\n        address,\n        args,\n        blockNumber,\n        blockTag,\n        chainId,\n        dataSuffix,\n        functionName,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        scopeKey,\n        walletClientAddress: walletClient?.account.address,\n        value\n    }), queryFn8({\n        abi,\n        walletClient\n    }), {\n        cacheTime,\n        enabled: Boolean(enabled && abi && address && functionName && walletClient),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n    return Object.assign(prepareContractWriteQuery, {\n        config: {\n            chainId,\n            mode: \"prepared\",\n            request: void 0,\n            ...prepareContractWriteQuery.data\n        }\n    });\n}\n// src/hooks/contracts/useToken.ts\n\nfunction queryKey9({ address, chainId, formatUnits, scopeKey }) {\n    return [\n        {\n            entity: \"token\",\n            address,\n            chainId,\n            formatUnits,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn9({ queryKey: [{ address, chainId, formatUnits }] }) {\n    if (!address) throw new Error(\"address is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchToken)({\n        address,\n        chainId,\n        formatUnits\n    });\n}\nfunction useToken({ address, chainId: chainId_, formatUnits = \"ether\", cacheTime, enabled = true, scopeKey, staleTime = 1e3 * 60 * 60 * 24, suspense, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    return useQuery(queryKey9({\n        address,\n        chainId,\n        formatUnits,\n        scopeKey\n    }), queryFn9, {\n        cacheTime,\n        enabled: Boolean(enabled && address),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/ens/useEnsAddress.ts\n\nfunction queryKey10({ chainId, name, scopeKey }) {\n    return [\n        {\n            entity: \"ensAddress\",\n            chainId,\n            name,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn10({ queryKey: [{ chainId, name }] }) {\n    if (!name) throw new Error(\"name is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchEnsAddress)({\n        chainId,\n        name\n    });\n}\nfunction useEnsAddress({ cacheTime, chainId: chainId_, enabled = true, name, scopeKey, staleTime = 1e3 * 60 * 60 * 24, suspense, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    return useQuery(queryKey10({\n        chainId,\n        name,\n        scopeKey\n    }), queryFn10, {\n        cacheTime,\n        enabled: Boolean(enabled && chainId && name),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/ens/useEnsAvatar.ts\n\nfunction queryKey11({ name, chainId, scopeKey }) {\n    return [\n        {\n            entity: \"ensAvatar\",\n            name,\n            chainId,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn11({ queryKey: [{ name, chainId }] }) {\n    if (!name) throw new Error(\"name is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchEnsAvatar)({\n        name,\n        chainId\n    });\n}\nfunction useEnsAvatar({ cacheTime, chainId: chainId_, enabled = true, name, scopeKey, staleTime = 1e3 * 60 * 60 * 24, suspense, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    return useQuery(queryKey11({\n        name,\n        chainId,\n        scopeKey\n    }), queryFn11, {\n        cacheTime,\n        enabled: Boolean(enabled && name && chainId),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/ens/useEnsName.ts\n\nfunction queryKey12({ address, chainId, scopeKey }) {\n    return [\n        {\n            entity: \"ensName\",\n            address,\n            chainId,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn12({ queryKey: [{ address, chainId }] }) {\n    if (!address) throw new Error(\"address is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchEnsName)({\n        address,\n        chainId\n    });\n}\nfunction useEnsName({ address, cacheTime, chainId: chainId_, enabled = true, scopeKey, staleTime = 1e3 * 60 * 60 * 24, suspense, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    return useQuery(queryKey12({\n        address,\n        chainId,\n        scopeKey\n    }), queryFn12, {\n        cacheTime,\n        enabled: Boolean(enabled && address && chainId),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/ens/useEnsResolver.ts\n\nfunction queryKey13({ chainId, name, scopeKey }) {\n    return [\n        {\n            entity: \"ensResolver\",\n            chainId,\n            name,\n            scopeKey,\n            persist: false\n        }\n    ];\n}\nfunction queryFn13({ queryKey: [{ chainId, name }] }) {\n    if (!name) throw new Error(\"name is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchEnsResolver)({\n        chainId,\n        name\n    });\n}\nfunction useEnsResolver({ chainId: chainId_, name, enabled = true, scopeKey, suspense, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    return useQuery(queryKey13({\n        chainId,\n        name,\n        scopeKey\n    }), queryFn13, {\n        cacheTime: 0,\n        enabled: Boolean(enabled && chainId && name),\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/transactions/usePrepareSendTransaction.ts\n\nfunction queryKey14({ accessList, account, activeChainId, chainId, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, scopeKey, walletClientAddress }) {\n    return [\n        {\n            entity: \"prepareSendTransaction\",\n            activeChainId,\n            accessList,\n            account,\n            chainId,\n            data,\n            gas,\n            gasPrice,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            nonce,\n            to,\n            value,\n            scopeKey,\n            walletClientAddress\n        }\n    ];\n}\nfunction queryFn14({ walletClient }) {\n    return ({ queryKey: [{ accessList, account, chainId, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value }] })=>{\n        if (!to) throw new Error(\"to is required\");\n        return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.prepareSendTransaction)({\n            accessList,\n            account,\n            chainId,\n            data,\n            gas,\n            gasPrice,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            nonce,\n            to,\n            value,\n            walletClient\n        });\n    };\n}\nfunction usePrepareSendTransaction({ accessList, account, chainId, cacheTime, data, enabled = true, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, scopeKey, staleTime, suspense, to, value, onError, onSettled, onSuccess } = {}) {\n    const { chain: activeChain } = useNetwork();\n    const { data: walletClient } = useWalletClient({\n        chainId\n    });\n    const prepareSendTransactionQuery = useQuery(queryKey14({\n        accessList,\n        activeChainId: activeChain?.id,\n        account,\n        chainId,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        scopeKey,\n        to,\n        value,\n        walletClientAddress: walletClient?.account.address\n    }), queryFn14({\n        walletClient\n    }), {\n        cacheTime,\n        enabled: Boolean(enabled && walletClient && to),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n    return Object.assign(prepareSendTransactionQuery, {\n        config: {\n            mode: \"prepared\",\n            ...prepareSendTransactionQuery.isSuccess ? prepareSendTransactionQuery.data : void 0\n        }\n    });\n}\n// src/hooks/transactions/useSendTransaction.ts\n\n\nvar mutationKey7 = (args)=>[\n        {\n            entity: \"sendTransaction\",\n            ...args\n        }\n    ];\nvar mutationFn7 = ({ accessList, account, chainId, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, mode, nonce, to, value })=>{\n    if (!to) throw new Error(\"to is required.\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.sendTransaction)({\n        accessList,\n        account,\n        chainId,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        mode,\n        nonce,\n        to,\n        value\n    });\n};\nfunction useSendTransaction({ accessList, account, chainId, data: data_, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, mode, nonce, to, value, onError, onMutate, onSettled, onSuccess } = {}) {\n    const { data, error, isError, isIdle, isLoading, isSuccess, mutate, mutateAsync, reset, status, variables } = useMutation(mutationKey7({\n        accessList,\n        account,\n        chainId,\n        data: data_,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        mode,\n        nonce,\n        to,\n        value\n    }), mutationFn7, {\n        onError,\n        onMutate,\n        onSettled,\n        onSuccess\n    });\n    const sendTransaction2 = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((args)=>mutate({\n            chainId,\n            mode,\n            ...args || {\n                accessList,\n                account,\n                chainId,\n                data: data_,\n                gas,\n                gasPrice,\n                maxFeePerGas,\n                maxPriorityFeePerGas,\n                mode,\n                nonce,\n                value,\n                to\n            }\n        }), [\n        accessList,\n        account,\n        chainId,\n        data_,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        mode,\n        mutate,\n        nonce,\n        to,\n        value\n    ]);\n    const sendTransactionAsync = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((args)=>mutateAsync({\n            chainId,\n            mode,\n            ...args || {\n                accessList,\n                account,\n                chainId,\n                data: data_,\n                gas,\n                gasPrice,\n                maxFeePerGas,\n                maxPriorityFeePerGas,\n                mode,\n                nonce,\n                value,\n                to\n            }\n        }), [\n        accessList,\n        account,\n        chainId,\n        data_,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        mode,\n        mutateAsync,\n        nonce,\n        to,\n        value\n    ]);\n    return {\n        data,\n        error,\n        isError,\n        isIdle,\n        isLoading,\n        isSuccess,\n        reset,\n        sendTransaction: mode === \"prepared\" && !to ? void 0 : sendTransaction2,\n        sendTransactionAsync: mode === \"prepared\" && !to ? void 0 : sendTransactionAsync,\n        status,\n        variables\n    };\n}\n// src/hooks/transactions/useTransaction.ts\n\nfunction queryKey15({ chainId, hash, scopeKey }) {\n    return [\n        {\n            entity: \"transaction\",\n            chainId,\n            hash,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn15({ queryKey: [{ chainId, hash }] }) {\n    if (!hash) throw new Error(\"hash is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchTransaction)({\n        chainId,\n        hash\n    });\n}\nfunction useTransaction({ cacheTime = 0, chainId: chainId_, enabled = true, hash, scopeKey, staleTime, suspense, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    return useQuery(queryKey15({\n        chainId,\n        hash,\n        scopeKey\n    }), queryFn15, {\n        cacheTime,\n        enabled: Boolean(enabled && hash),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/transactions/useWaitForTransaction.ts\n\nfunction queryKey16({ confirmations, chainId, hash, scopeKey, timeout }) {\n    return [\n        {\n            entity: \"waitForTransaction\",\n            confirmations,\n            chainId,\n            hash,\n            scopeKey,\n            timeout\n        }\n    ];\n}\nfunction queryFn16({ onReplaced }) {\n    return ({ queryKey: [{ chainId, confirmations, hash, timeout }] })=>{\n        if (!hash) throw new Error(\"hash is required\");\n        return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.waitForTransaction)({\n            chainId,\n            confirmations,\n            hash,\n            onReplaced,\n            timeout\n        });\n    };\n}\nfunction useWaitForTransaction({ chainId: chainId_, confirmations, hash, timeout, cacheTime, enabled = true, scopeKey, staleTime, suspense, onError, onReplaced, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    return useQuery(queryKey16({\n        chainId,\n        confirmations,\n        hash,\n        scopeKey,\n        timeout\n    }), queryFn16({\n        onReplaced\n    }), {\n        cacheTime,\n        enabled: Boolean(enabled && hash),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/transactions/useWatchPendingTransactions.ts\n\nfunction useWatchPendingTransactions({ chainId: chainId_, enabled = true, listener }) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    const publicClient = usePublicClient({\n        chainId\n    });\n    const webSocketPublicClient = useWebSocketPublicClient({\n        chainId\n    });\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        if (!enabled) return;\n        const publicClient_ = webSocketPublicClient ?? publicClient;\n        return publicClient_.watchPendingTransactions({\n            onTransactions: listener\n        });\n    }, [\n        enabled,\n        listener,\n        publicClient,\n        webSocketPublicClient\n    ]);\n}\n// src/index.ts\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/wagmi/dist/index.js\n");

/***/ })

};
;